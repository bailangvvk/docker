# 使用 busybox 作为基础镜像
FROM busybox:1.35-uclibc AS builder
ARG NGINX_VERSION ZSTD_VERSION

# 设置工作目录
WORKDIR /usr/src

# 安装编译所需的依赖
RUN wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \
    && tar -zxf nginx-${NGINX_VERSION}.tar.gz

# 下载和安装必要的模块（例如 ModSecurity 和 Zstd）
RUN git clone --recurse-submodules -j8 https://github.com/google/ngx_brotli \
    && git clone --depth 1 https://github.com/owasp-modsecurity/ModSecurity \
    && cd ModSecurity \
    && git submodule init \
    && git submodule update \
    && ./build.sh \
    && ./configure \
    && make && make install \
    && cd .. \
    && git clone https://github.com/owasp-modsecurity/ModSecurity-nginx \
    && wget https://github.com/facebook/zstd/releases/download/v${ZSTD_VERSION}/zstd-${ZSTD_VERSION}.tar.gz \
    && tar -xzf zstd-${ZSTD_VERSION}.tar.gz \
    && cd zstd-${ZSTD_VERSION} \
    && make clean && CFLAGS="-fPIC" make && make install \
    && cd ..

# 配置和静态编译 NGINX
RUN cd nginx-${NGINX_VERSION} && \
    ./configure --with-compat \
                --add-dynamic-module=../ngx_brotli \
                --add-dynamic-module=../ModSecurity-nginx \
                --add-dynamic-module=../zstd-nginx-module \
                --with-static-module=ngx_http_zstd_filter_module \
                --with-static-module=ngx_http_modsecurity_module \
                --without-http_rewrite_module \
                --without-http_gzip_module \
                --without-http_ssl_module \
                --with-pcre-jit \
                --with-openssl=/usr/local/openssl \
                --prefix=/usr/local/nginx --with-cc-opt="-static" \
                --with-ld-opt="-static" && \
    make -j$(nproc) && make install

# 创建一个最终的静态镜像
FROM busybox:1.35-uclibc

# 复制静态编译的 NGINX 和相关模块
COPY --from=builder /usr/local/nginx /usr/local/nginx

# 复制 ModSecurity 的相关文件
COPY --from=builder /usr/local/modsecurity /usr/local/modsecurity

# 创建配置文件目录，并下载必要的配置文件
RUN mkdir -p /etc/nginx/modsec/plugins \
    && wget https://github.com/coreruleset/coreruleset/archive/v${CORERULESET_VERSION}.tar.gz \
    && tar -xzf v${CORERULESET_VERSION}.tar.gz --strip-components=1 -C /etc/nginx/modsec \
    && rm -f v${CORERULESET_VERSION}.tar.gz \
    && wget -P /etc/nginx/modsec/plugins https://raw.githubusercontent.com/coreruleset/wordpress-rule-exclusions-plugin/master/plugins/wordpress-rule-exclusions-before.conf \
    && wget -P /etc/nginx/modsec/plugins https://raw.githubusercontent.com/coreruleset/wordpress-rule-exclusions-plugin/master/plugins/wordpress-rule-exclusions-config.conf \
    && wget -P /etc/nginx/modsec/plugins https://raw.githubusercontent.com/kejilion/nginx/main/waf/ldnmp-before.conf \
    && cp /etc/nginx/modsec/crs-setup.conf.example /etc/nginx/modsec/crs-setup.conf \
    && echo 'SecAction "id:900110, phase:1, pass, setvar:tx.inbound_anomaly_score_threshold=30, setvar:tx.outbound_anomaly_score_threshold=16"' >> /etc/nginx/modsec/crs-setup.conf \
    && wget https://raw.githubusercontent.com/owasp-modsecurity/ModSecurity/v3/master/modsecurity.conf-recommended -O /etc/nginx/modsec/modsecurity.conf \
    && sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/' /etc/nginx/modsec/modsecurity.conf \
    && sed -i 's/SecPcreMatchLimit [0-9]\+/SecPcreMatchLimit 20000/' /etc/nginx/modsec/modsecurity.conf \
    && sed -i 's/SecPcreMatchLimitRecursion [0-9]\+/SecPcreMatchLimitRecursion 20000/' /etc/nginx/modsec/modsecurity.conf \
    && sed -i 's/^SecRequestBodyLimit\s\+[0-9]\+/SecRequestBodyLimit 52428800/' /etc/nginx/modsec/modsecurity.conf \
    && sed -i 's/^SecRequestBodyNoFilesLimit\s\+[0-9]\+/SecRequestBodyNoFilesLimit 524288/' /etc/nginx/modsec/modsecurity.conf \
    && sed -i 's/^SecAuditEngine RelevantOnly/SecAuditEngine Off/' /etc/nginx/modsec/modsecurity.conf \
    && echo 'Include /etc/nginx/modsec/crs-setup.conf' >> /etc/nginx/modsec/modsecurity.conf \
    && echo 'Include /etc/nginx/modsec/plugins/*-config.conf' >> /etc/nginx/modsec/modsecurity.conf \
    && echo 'Include /etc/nginx/modsec/plugins/*-before.conf' >> /etc/nginx/modsec/modsecurity.conf \
    && echo 'Include /etc/nginx/modsec/rules/*.conf' >> /etc/nginx/modsec/modsecurity.conf \
    && echo 'Include /etc/nginx/modsec/plugins/*-after.conf' >> /etc/nginx/modsec/modsecurity.conf \
    && apk add --no-cache lua5.1 lua5.1-dev pcre pcre-dev yajl yajl-dev \
    && ldconfig /usr/lib \
    && wget https://raw.githubusercontent.com/owasp-modsecurity/ModSecurity/v3/master/unicode.mapping -O /etc/nginx/modsec/unicode.mapping \
    && rm -rf /var/cache/apk/*
